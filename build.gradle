plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm" version "1.8.0"
    id 'fabric-loom' version '1.1-SNAPSHOT'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

project.ext.lwjglVersion = "3.3.2-SNAPSHOT"
project.ext.lwjglNatives = "natives-windows"
project.ext.jomlVersion = "1.10.5"
project.ext.winNatives = "natives-windows"
project.ext.linuxNatives = "natives-linux"

group 'org.hydra2s'
version '0.0.2-SNAPSHOT'

wrapper {
    gradleVersion = '8.1-20221230234309+0000'
    distributionUrl = distributionUrl.replace("bin", "all")
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }

    maven { url 'https://jitpack.io' }

// Add repositories to retrieve artifacts from in here.
// You should only use this when depending on other mods because
// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
// See https://docs.gradle.org/current/userguide/declaring_repositories.html
// for more information about repositories.
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    //
    //include(modImplementation('com.github.hydra2s:noire-java:main-SNAPSHOT'));
    include(modImplementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion"))
    include(modImplementation group: 'org.bytedeco', name: 'javacpp', version: '1.5.9-SNAPSHOT')
    include(modImplementation("org.lwjgl:lwjgl:$lwjglVersion"))
    include(modImplementation("org.lwjgl:lwjgl-vulkan:$lwjglVersion"))
    include(modImplementation("org.joml:joml:${jomlVersion}"))
    include(modImplementation("org.lwjgl:lwjgl-vma:$lwjglVersion"))
    include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$linuxNatives"))
    include(modImplementation("org.lwjgl:lwjgl-glfw:$lwjglVersion"))
    include(runtimeOnly("org.lwjgl:lwjgl-glfw:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-glfw:$lwjglVersion:$linuxNatives"))
    include(modImplementation("org.lwjgl:lwjgl-stb:$lwjglVersion"))
    include(runtimeOnly("org.lwjgl:lwjgl-stb:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-stb:$lwjglVersion:$linuxNatives"))
    include(modImplementation("org.lwjgl:lwjgl-openal:$lwjglVersion"))
    include(runtimeOnly("org.lwjgl:lwjgl-openal:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-openal:$lwjglVersion:$linuxNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl:$lwjglVersion:$linuxNatives"))
    include(modImplementation("org.lwjgl:lwjgl-shaderc:$lwjglVersion"))
    include(runtimeOnly("org.lwjgl:lwjgl-shaderc:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-shaderc:$lwjglVersion:$linuxNatives"))
    modImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }

    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
