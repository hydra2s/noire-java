package org.hydra2s.noire.descriptors;

//
import org.hydra2s.utils.Promise;
import org.lwjgl.vulkan.*;

//
import java.nio.IntBuffer;
import java.nio.LongBuffer;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Objects;
import java.util.function.Function;

//
import static org.hydra2s.noire.descriptors.BasicCInfo.VkFormatCompatibilityClass.*;
import static org.lwjgl.system.MemoryUtil.memAllocInt;
import static org.lwjgl.vulkan.EXTConditionalRendering.VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT;
import static org.lwjgl.vulkan.EXTTransformFeedback.VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT;
import static org.lwjgl.vulkan.EXTTransformFeedback.VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT;
import static org.lwjgl.vulkan.HUAWEIInvocationMask.VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI;
import static org.lwjgl.vulkan.HUAWEIInvocationMask.VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI;
import static org.lwjgl.vulkan.IMGFormatPVRTC.*;
import static org.lwjgl.vulkan.KHRAccelerationStructure.VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR;
import static org.lwjgl.vulkan.KHRAccelerationStructure.VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR;
import static org.lwjgl.vulkan.KHRRayTracingPipeline.VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR;
import static org.lwjgl.vulkan.KHRSwapchain.VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;
import static org.lwjgl.vulkan.KHRSynchronization2.*;
import static org.lwjgl.vulkan.VK10.*;
import static org.lwjgl.vulkan.VK11.*;
import static org.lwjgl.vulkan.VK12.*;
import static org.lwjgl.vulkan.VK13.*;

//
public class BasicCInfo {

    static public class VkFormatCompatibilityClass extends BasicCInfo {
        static public int
                VK_FORMAT_COMPATIBILITY_CLASS_NONE_BIT = 0,
                VK_FORMAT_COMPATIBILITY_CLASS_8_BIT = 1,
                VK_FORMAT_COMPATIBILITY_CLASS_16_BIT = 2,
                VK_FORMAT_COMPATIBILITY_CLASS_24_BIT = 3,
                VK_FORMAT_COMPATIBILITY_CLASS_32_BIT = 4,
                VK_FORMAT_COMPATIBILITY_CLASS_48_BIT = 5,
                VK_FORMAT_COMPATIBILITY_CLASS_64_BIT = 6,
                VK_FORMAT_COMPATIBILITY_CLASS_96_BIT = 7,
                VK_FORMAT_COMPATIBILITY_CLASS_128_BIT = 8,
                VK_FORMAT_COMPATIBILITY_CLASS_192_BIT = 9,
                VK_FORMAT_COMPATIBILITY_CLASS_256_BIT = 10,
                VK_FORMAT_COMPATIBILITY_CLASS_BC1_RGB_BIT = 11,
                VK_FORMAT_COMPATIBILITY_CLASS_BC1_RGBA_BIT = 12,
                VK_FORMAT_COMPATIBILITY_CLASS_BC2_BIT = 13,
                VK_FORMAT_COMPATIBILITY_CLASS_BC3_BIT = 14,
                VK_FORMAT_COMPATIBILITY_CLASS_BC4_BIT = 15,
                VK_FORMAT_COMPATIBILITY_CLASS_BC5_BIT = 16,
                VK_FORMAT_COMPATIBILITY_CLASS_BC6H_BIT = 17,
                VK_FORMAT_COMPATIBILITY_CLASS_BC7_BIT = 18,
                VK_FORMAT_COMPATIBILITY_CLASS_ETC2_RGB_BIT = 19,
                VK_FORMAT_COMPATIBILITY_CLASS_ETC2_RGBA_BIT = 20,
                VK_FORMAT_COMPATIBILITY_CLASS_ETC2_EAC_RGBA_BIT = 21,
                VK_FORMAT_COMPATIBILITY_CLASS_EAC_R_BIT = 22,
                VK_FORMAT_COMPATIBILITY_CLASS_EAC_RG_BIT = 23,
                VK_FORMAT_COMPATIBILITY_CLASS_ASTC_4X4_BIT = 24,
                VK_FORMAT_COMPATIBILITY_CLASS_ASTC_5X4_BIT = 25,
                VK_FORMAT_COMPATIBILITY_CLASS_ASTC_5X5_BIT = 26,
                VK_FORMAT_COMPATIBILITY_CLASS_ASTC_6X5_BIT = 27,
                VK_FORMAT_COMPATIBILITY_CLASS_ASTC_6X6_BIT = 28,
                VK_FORMAT_COMPATIBILITY_CLASS_ASTC_8X5_BIT = 29,
                VK_FORMAT_COMPATIBILITY_CLASS_ASTC_8X6_BIT = 20,
                VK_FORMAT_COMPATIBILITY_CLASS_ASTC_8X8_BIT = 31,
                VK_FORMAT_COMPATIBILITY_CLASS_ASTC_10X5_BIT = 32,
                VK_FORMAT_COMPATIBILITY_CLASS_ASTC_10X6_BIT = 33,
                VK_FORMAT_COMPATIBILITY_CLASS_ASTC_10X8_BIT = 34,
                VK_FORMAT_COMPATIBILITY_CLASS_ASTC_10X10_BIT = 35,
                VK_FORMAT_COMPATIBILITY_CLASS_ASTC_12X10_BIT = 36,
                VK_FORMAT_COMPATIBILITY_CLASS_ASTC_12X12_BIT = 37,
                VK_FORMAT_COMPATIBILITY_CLASS_D16_BIT = 38,
                VK_FORMAT_COMPATIBILITY_CLASS_D24_BIT = 39,
                VK_FORMAT_COMPATIBILITY_CLASS_D32_BIT = 30,
                VK_FORMAT_COMPATIBILITY_CLASS_S8_BIT = 41,
                VK_FORMAT_COMPATIBILITY_CLASS_D16S8_BIT = 42,
                VK_FORMAT_COMPATIBILITY_CLASS_D24S8_BIT = 43,
                VK_FORMAT_COMPATIBILITY_CLASS_D32S8_BIT = 44,
                VK_FORMAT_COMPATIBILITY_CLASS_PVRTC1_2BPP_BIT = 45,
                VK_FORMAT_COMPATIBILITY_CLASS_PVRTC1_4BPP_BIT = 46,
                VK_FORMAT_COMPATIBILITY_CLASS_PVRTC2_2BPP_BIT = 47,
                VK_FORMAT_COMPATIBILITY_CLASS_PVRTC2_4BPP_BIT = 48,
        /* KHR_sampler_YCbCr_conversion */
        VK_FORMAT_COMPATIBILITY_CLASS_32BIT_G8B8G8R8 = 49,
                VK_FORMAT_COMPATIBILITY_CLASS_32BIT_B8G8R8G8 = 50,
                VK_FORMAT_COMPATIBILITY_CLASS_64BIT_R10G10B10A10 = 51,
                VK_FORMAT_COMPATIBILITY_CLASS_64BIT_G10B10G10R10 = 52,
                VK_FORMAT_COMPATIBILITY_CLASS_64BIT_B10G10R10G10 = 53,
                VK_FORMAT_COMPATIBILITY_CLASS_64BIT_R12G12B12A12 = 54,
                VK_FORMAT_COMPATIBILITY_CLASS_64BIT_G12B12G12R12 = 55,
                VK_FORMAT_COMPATIBILITY_CLASS_64BIT_B12G12R12G12 = 56,
                VK_FORMAT_COMPATIBILITY_CLASS_64BIT_G16B16G16R16 = 57,
                VK_FORMAT_COMPATIBILITY_CLASS_64BIT_B16G16R16G16 = 58,
                VK_FORMAT_COMPATIBILITY_CLASS_8BIT_3PLANE_420 = 59,
                VK_FORMAT_COMPATIBILITY_CLASS_8BIT_2PLANE_420 = 60,
                VK_FORMAT_COMPATIBILITY_CLASS_8BIT_3PLANE_422 = 61,
                VK_FORMAT_COMPATIBILITY_CLASS_8BIT_2PLANE_422 = 62,
                VK_FORMAT_COMPATIBILITY_CLASS_8BIT_3PLANE_444 = 63,
                VK_FORMAT_COMPATIBILITY_CLASS_10BIT_3PLANE_420 = 64,
                VK_FORMAT_COMPATIBILITY_CLASS_10BIT_2PLANE_420 = 65,
                VK_FORMAT_COMPATIBILITY_CLASS_10BIT_3PLANE_422 = 66,
                VK_FORMAT_COMPATIBILITY_CLASS_10BIT_2PLANE_422 = 67,
                VK_FORMAT_COMPATIBILITY_CLASS_10BIT_3PLANE_444 = 68,
                VK_FORMAT_COMPATIBILITY_CLASS_12BIT_3PLANE_420 = 69,
                VK_FORMAT_COMPATIBILITY_CLASS_12BIT_2PLANE_420 = 70,
                VK_FORMAT_COMPATIBILITY_CLASS_12BIT_3PLANE_422 = 71,
                VK_FORMAT_COMPATIBILITY_CLASS_12BIT_2PLANE_422 = 72,
                VK_FORMAT_COMPATIBILITY_CLASS_12BIT_3PLANE_444 = 73,
                VK_FORMAT_COMPATIBILITY_CLASS_16BIT_3PLANE_420 = 74,
                VK_FORMAT_COMPATIBILITY_CLASS_16BIT_2PLANE_420 = 75,
                VK_FORMAT_COMPATIBILITY_CLASS_16BIT_3PLANE_422 = 76,
                VK_FORMAT_COMPATIBILITY_CLASS_16BIT_2PLANE_422 = 77,
                VK_FORMAT_COMPATIBILITY_CLASS_16BIT_3PLANE_444 = 78,
                VK_FORMAT_COMPATIBILITY_CLASS_MAX_ENUM = 79;
    }

    static public class VULKAN_FORMAT_INFO {
        int size = 1;
        int channel_count = 1;
        int format_class = 0;

        public VULKAN_FORMAT_INFO(int F[]) {
            this.size = F[0];
            this.channel_count = F[1];
            this.format_class = F[2];
        };

        public VULKAN_FORMAT_INFO(VULKAN_FORMAT_INFO F) {
            this.size = F.size;
            this.channel_count = F.channel_count;
            this.format_class = F.format_class;
        };

        public VULKAN_FORMAT_INFO(int size, int channel_count, int format_class) {
            this.size = size;
            this.channel_count = channel_count;
            this.format_class = format_class;
        };
    }

    //
    public static long[] unboxed(final Long[] array) {
        return Arrays.stream(array)
            .filter(Objects::nonNull)
            .mapToLong(Long::longValue)
            .toArray();
    };

    //
    public static HashMap<Integer, VULKAN_FORMAT_INFO> vk_format_table = new HashMap<Integer, VULKAN_FORMAT_INFO>();
    {
        vk_format_table.put(VK_FORMAT_UNDEFINED, new VULKAN_FORMAT_INFO(0, 0, VK_FORMAT_COMPATIBILITY_CLASS_NONE_BIT));
        vk_format_table.put(VK_FORMAT_R4G4_UNORM_PACK8, new VULKAN_FORMAT_INFO(1, 2, VK_FORMAT_COMPATIBILITY_CLASS_8_BIT));
        vk_format_table.put(VK_FORMAT_R4G4B4A4_UNORM_PACK16, new VULKAN_FORMAT_INFO(2, 4, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_B4G4R4A4_UNORM_PACK16, new VULKAN_FORMAT_INFO(2, 4, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R5G6B5_UNORM_PACK16, new VULKAN_FORMAT_INFO(2, 3, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_B5G6R5_UNORM_PACK16, new VULKAN_FORMAT_INFO(2, 3, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R5G5B5A1_UNORM_PACK16, new VULKAN_FORMAT_INFO(2, 4, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_B5G5R5A1_UNORM_PACK16, new VULKAN_FORMAT_INFO(2, 4, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_A1R5G5B5_UNORM_PACK16, new VULKAN_FORMAT_INFO(2, 4, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R8_UNORM, new VULKAN_FORMAT_INFO(1, 1, VK_FORMAT_COMPATIBILITY_CLASS_8_BIT));
        vk_format_table.put(VK_FORMAT_R8_SNORM, new VULKAN_FORMAT_INFO(1, 1, VK_FORMAT_COMPATIBILITY_CLASS_8_BIT));
        vk_format_table.put(VK_FORMAT_R8_USCALED, new VULKAN_FORMAT_INFO(1, 1, VK_FORMAT_COMPATIBILITY_CLASS_8_BIT));
        vk_format_table.put(VK_FORMAT_R8_SSCALED, new VULKAN_FORMAT_INFO(1, 1, VK_FORMAT_COMPATIBILITY_CLASS_8_BIT));
        vk_format_table.put(VK_FORMAT_R8_UINT, new VULKAN_FORMAT_INFO(1, 1, VK_FORMAT_COMPATIBILITY_CLASS_8_BIT));
        vk_format_table.put(VK_FORMAT_R8_SINT, new VULKAN_FORMAT_INFO(1, 1, VK_FORMAT_COMPATIBILITY_CLASS_8_BIT));
        vk_format_table.put(VK_FORMAT_R8_SRGB, new VULKAN_FORMAT_INFO(1, 1, VK_FORMAT_COMPATIBILITY_CLASS_8_BIT));
        vk_format_table.put(VK_FORMAT_R8G8_UNORM, new VULKAN_FORMAT_INFO(2, 2, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R8G8_SNORM, new VULKAN_FORMAT_INFO(2, 2, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R8G8_USCALED, new VULKAN_FORMAT_INFO(2, 2, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R8G8_SSCALED, new VULKAN_FORMAT_INFO(2, 2, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R8G8_UINT, new VULKAN_FORMAT_INFO(2, 2, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R8G8_SINT, new VULKAN_FORMAT_INFO(2, 2, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R8G8_SRGB, new VULKAN_FORMAT_INFO(2, 2, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R8G8B8_UNORM, new VULKAN_FORMAT_INFO(3, 3, VK_FORMAT_COMPATIBILITY_CLASS_24_BIT));
        vk_format_table.put(VK_FORMAT_R8G8B8_SNORM, new VULKAN_FORMAT_INFO(3, 3, VK_FORMAT_COMPATIBILITY_CLASS_24_BIT));
        vk_format_table.put(VK_FORMAT_R8G8B8_USCALED, new VULKAN_FORMAT_INFO(3, 3, VK_FORMAT_COMPATIBILITY_CLASS_24_BIT));
        vk_format_table.put(VK_FORMAT_R8G8B8_SSCALED, new VULKAN_FORMAT_INFO(3, 3, VK_FORMAT_COMPATIBILITY_CLASS_24_BIT));
        vk_format_table.put(VK_FORMAT_R8G8B8_UINT, new VULKAN_FORMAT_INFO(3, 3, VK_FORMAT_COMPATIBILITY_CLASS_24_BIT));
        vk_format_table.put(VK_FORMAT_R8G8B8_SINT, new VULKAN_FORMAT_INFO(3, 3, VK_FORMAT_COMPATIBILITY_CLASS_24_BIT));
        vk_format_table.put(VK_FORMAT_R8G8B8_SRGB, new VULKAN_FORMAT_INFO(3, 3, VK_FORMAT_COMPATIBILITY_CLASS_24_BIT));
        vk_format_table.put(VK_FORMAT_B8G8R8_UNORM, new VULKAN_FORMAT_INFO(3, 3, VK_FORMAT_COMPATIBILITY_CLASS_24_BIT));
        vk_format_table.put(VK_FORMAT_B8G8R8_SNORM, new VULKAN_FORMAT_INFO(3, 3, VK_FORMAT_COMPATIBILITY_CLASS_24_BIT));
        vk_format_table.put(VK_FORMAT_B8G8R8_USCALED, new VULKAN_FORMAT_INFO(3, 3, VK_FORMAT_COMPATIBILITY_CLASS_24_BIT));
        vk_format_table.put(VK_FORMAT_B8G8R8_SSCALED, new VULKAN_FORMAT_INFO(3, 3, VK_FORMAT_COMPATIBILITY_CLASS_24_BIT));
        vk_format_table.put(VK_FORMAT_B8G8R8_UINT, new VULKAN_FORMAT_INFO(3, 3, VK_FORMAT_COMPATIBILITY_CLASS_24_BIT));
        vk_format_table.put(VK_FORMAT_B8G8R8_SINT, new VULKAN_FORMAT_INFO(3, 3, VK_FORMAT_COMPATIBILITY_CLASS_24_BIT));
        vk_format_table.put(VK_FORMAT_B8G8R8_SRGB, new VULKAN_FORMAT_INFO(3, 3, VK_FORMAT_COMPATIBILITY_CLASS_24_BIT));
        vk_format_table.put(VK_FORMAT_R8G8B8A8_UNORM, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_R8G8B8A8_SNORM, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_R8G8B8A8_USCALED, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_R8G8B8A8_SSCALED, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_R8G8B8A8_UINT, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_R8G8B8A8_SINT, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_R8G8B8A8_SRGB, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_B8G8R8A8_UNORM, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_B8G8R8A8_SNORM, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_B8G8R8A8_USCALED, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_B8G8R8A8_SSCALED, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_B8G8R8A8_UINT, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_B8G8R8A8_SINT, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_B8G8R8A8_SRGB, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A8B8G8R8_UNORM_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A8B8G8R8_SNORM_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A8B8G8R8_USCALED_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A8B8G8R8_SSCALED_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A8B8G8R8_UINT_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A8B8G8R8_SINT_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A8B8G8R8_SRGB_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A2R10G10B10_UNORM_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A2R10G10B10_SNORM_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A2R10G10B10_USCALED_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A2R10G10B10_SSCALED_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A2R10G10B10_UINT_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A2R10G10B10_SINT_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A2B10G10R10_UNORM_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A2B10G10R10_SNORM_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A2B10G10R10_USCALED_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A2B10G10R10_SSCALED_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A2B10G10R10_UINT_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_A2B10G10R10_SINT_PACK32, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_R16_UNORM, new VULKAN_FORMAT_INFO(2, 1, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R16_SNORM, new VULKAN_FORMAT_INFO(2, 1, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R16_USCALED, new VULKAN_FORMAT_INFO(2, 1, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R16_SSCALED, new VULKAN_FORMAT_INFO(2, 1, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R16_UINT, new VULKAN_FORMAT_INFO(2, 1, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R16_SINT, new VULKAN_FORMAT_INFO(2, 1, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R16_SFLOAT, new VULKAN_FORMAT_INFO(2, 1, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R16G16_UNORM, new VULKAN_FORMAT_INFO(4, 2, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_R16G16_SNORM, new VULKAN_FORMAT_INFO(4, 2, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_R16G16_USCALED, new VULKAN_FORMAT_INFO(4, 2, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_R16G16_SSCALED, new VULKAN_FORMAT_INFO(4, 2, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_R16G16_UINT, new VULKAN_FORMAT_INFO(4, 2, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_R16G16_SINT, new VULKAN_FORMAT_INFO(4, 2, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_R16G16_SFLOAT, new VULKAN_FORMAT_INFO(4, 2, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_R16G16B16_UNORM, new VULKAN_FORMAT_INFO(6, 3, VK_FORMAT_COMPATIBILITY_CLASS_48_BIT));
        vk_format_table.put(VK_FORMAT_R16G16B16_SNORM, new VULKAN_FORMAT_INFO(6, 3, VK_FORMAT_COMPATIBILITY_CLASS_48_BIT));
        vk_format_table.put(VK_FORMAT_R16G16B16_USCALED, new VULKAN_FORMAT_INFO(6, 3, VK_FORMAT_COMPATIBILITY_CLASS_48_BIT));
        vk_format_table.put(VK_FORMAT_R16G16B16_SSCALED, new VULKAN_FORMAT_INFO(6, 3, VK_FORMAT_COMPATIBILITY_CLASS_48_BIT));
        vk_format_table.put(VK_FORMAT_R16G16B16_UINT, new VULKAN_FORMAT_INFO(6, 3, VK_FORMAT_COMPATIBILITY_CLASS_48_BIT));
        vk_format_table.put(VK_FORMAT_R16G16B16_SINT, new VULKAN_FORMAT_INFO(6, 3, VK_FORMAT_COMPATIBILITY_CLASS_48_BIT));
        vk_format_table.put(VK_FORMAT_R16G16B16_SFLOAT, new VULKAN_FORMAT_INFO(6, 3, VK_FORMAT_COMPATIBILITY_CLASS_48_BIT));
        vk_format_table.put(VK_FORMAT_R16G16B16A16_UNORM, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_64_BIT));
        vk_format_table.put(VK_FORMAT_R16G16B16A16_SNORM, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_64_BIT));
        vk_format_table.put(VK_FORMAT_R16G16B16A16_USCALED, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_64_BIT));
        vk_format_table.put(VK_FORMAT_R16G16B16A16_SSCALED, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_64_BIT));
        vk_format_table.put(VK_FORMAT_R16G16B16A16_UINT, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_64_BIT));
        vk_format_table.put(VK_FORMAT_R16G16B16A16_SINT, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_64_BIT));
        vk_format_table.put(VK_FORMAT_R16G16B16A16_SFLOAT, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_64_BIT));
        vk_format_table.put(VK_FORMAT_R32_UINT, new VULKAN_FORMAT_INFO(4, 1, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_R32_SINT, new VULKAN_FORMAT_INFO(4, 1, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_R32_SFLOAT, new VULKAN_FORMAT_INFO(4, 1, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_R32G32_UINT, new VULKAN_FORMAT_INFO(8, 2, VK_FORMAT_COMPATIBILITY_CLASS_64_BIT));
        vk_format_table.put(VK_FORMAT_R32G32_SINT, new VULKAN_FORMAT_INFO(8, 2, VK_FORMAT_COMPATIBILITY_CLASS_64_BIT));
        vk_format_table.put(VK_FORMAT_R32G32_SFLOAT, new VULKAN_FORMAT_INFO(8, 2, VK_FORMAT_COMPATIBILITY_CLASS_64_BIT));
        vk_format_table.put(VK_FORMAT_R32G32B32_UINT, new VULKAN_FORMAT_INFO(12, 3, VK_FORMAT_COMPATIBILITY_CLASS_96_BIT));
        vk_format_table.put(VK_FORMAT_R32G32B32_SINT, new VULKAN_FORMAT_INFO(12, 3, VK_FORMAT_COMPATIBILITY_CLASS_96_BIT));
        vk_format_table.put(VK_FORMAT_R32G32B32_SFLOAT, new VULKAN_FORMAT_INFO(12, 3, VK_FORMAT_COMPATIBILITY_CLASS_96_BIT));
        vk_format_table.put(VK_FORMAT_R32G32B32A32_UINT, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_128_BIT));
        vk_format_table.put(VK_FORMAT_R32G32B32A32_SINT, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_128_BIT));
        vk_format_table.put(VK_FORMAT_R32G32B32A32_SFLOAT, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_128_BIT));
        vk_format_table.put(VK_FORMAT_R64_UINT, new VULKAN_FORMAT_INFO(8, 1, VK_FORMAT_COMPATIBILITY_CLASS_64_BIT));
        vk_format_table.put(VK_FORMAT_R64_SINT, new VULKAN_FORMAT_INFO(8, 1, VK_FORMAT_COMPATIBILITY_CLASS_64_BIT));
        vk_format_table.put(VK_FORMAT_R64_SFLOAT, new VULKAN_FORMAT_INFO(8, 1, VK_FORMAT_COMPATIBILITY_CLASS_64_BIT));
        vk_format_table.put(VK_FORMAT_R64G64_UINT, new VULKAN_FORMAT_INFO(16, 2, VK_FORMAT_COMPATIBILITY_CLASS_128_BIT));
        vk_format_table.put(VK_FORMAT_R64G64_SINT, new VULKAN_FORMAT_INFO(16, 2, VK_FORMAT_COMPATIBILITY_CLASS_128_BIT));
        vk_format_table.put(VK_FORMAT_R64G64_SFLOAT, new VULKAN_FORMAT_INFO(16, 2, VK_FORMAT_COMPATIBILITY_CLASS_128_BIT));
        vk_format_table.put(VK_FORMAT_R64G64B64_UINT, new VULKAN_FORMAT_INFO(24, 3, VK_FORMAT_COMPATIBILITY_CLASS_192_BIT));
        vk_format_table.put(VK_FORMAT_R64G64B64_SINT, new VULKAN_FORMAT_INFO(24, 3, VK_FORMAT_COMPATIBILITY_CLASS_192_BIT));
        vk_format_table.put(VK_FORMAT_R64G64B64_SFLOAT, new VULKAN_FORMAT_INFO(24, 3, VK_FORMAT_COMPATIBILITY_CLASS_192_BIT));
        vk_format_table.put(VK_FORMAT_R64G64B64A64_UINT, new VULKAN_FORMAT_INFO(32, 4, VK_FORMAT_COMPATIBILITY_CLASS_256_BIT));
        vk_format_table.put(VK_FORMAT_R64G64B64A64_SINT, new VULKAN_FORMAT_INFO(32, 4, VK_FORMAT_COMPATIBILITY_CLASS_256_BIT));
        vk_format_table.put(VK_FORMAT_R64G64B64A64_SFLOAT, new VULKAN_FORMAT_INFO(32, 4, VK_FORMAT_COMPATIBILITY_CLASS_256_BIT));
        vk_format_table.put(VK_FORMAT_B10G11R11_UFLOAT_PACK32, new VULKAN_FORMAT_INFO(4, 3, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_E5B9G9R9_UFLOAT_PACK32, new VULKAN_FORMAT_INFO(4, 3, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_D16_UNORM, new VULKAN_FORMAT_INFO(2, 1, VK_FORMAT_COMPATIBILITY_CLASS_NONE_BIT));
        vk_format_table.put(VK_FORMAT_X8_D24_UNORM_PACK32, new VULKAN_FORMAT_INFO(4, 1, VK_FORMAT_COMPATIBILITY_CLASS_NONE_BIT));
        vk_format_table.put(VK_FORMAT_D32_SFLOAT, new VULKAN_FORMAT_INFO(4, 1, VK_FORMAT_COMPATIBILITY_CLASS_NONE_BIT));
        vk_format_table.put(VK_FORMAT_S8_UINT, new VULKAN_FORMAT_INFO(1, 1, VK_FORMAT_COMPATIBILITY_CLASS_NONE_BIT));
        vk_format_table.put(VK_FORMAT_D16_UNORM_S8_UINT, new VULKAN_FORMAT_INFO(3, 2, VK_FORMAT_COMPATIBILITY_CLASS_NONE_BIT));
        vk_format_table.put(VK_FORMAT_D24_UNORM_S8_UINT, new VULKAN_FORMAT_INFO(4, 2, VK_FORMAT_COMPATIBILITY_CLASS_NONE_BIT));
        vk_format_table.put(VK_FORMAT_D32_SFLOAT_S8_UINT, new VULKAN_FORMAT_INFO(8, 2, VK_FORMAT_COMPATIBILITY_CLASS_NONE_BIT));
        vk_format_table.put(VK_FORMAT_BC1_RGB_UNORM_BLOCK, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_BC1_RGB_BIT));
        vk_format_table.put(VK_FORMAT_BC1_RGB_SRGB_BLOCK, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_BC1_RGB_BIT));
        vk_format_table.put(VK_FORMAT_BC1_RGBA_UNORM_BLOCK, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_BC1_RGBA_BIT));
        vk_format_table.put(VK_FORMAT_BC1_RGBA_SRGB_BLOCK, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_BC1_RGBA_BIT));
        vk_format_table.put(VK_FORMAT_BC2_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_BC2_BIT));
        vk_format_table.put(VK_FORMAT_BC2_SRGB_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_BC2_BIT));
        vk_format_table.put(VK_FORMAT_BC3_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_BC3_BIT));
        vk_format_table.put(VK_FORMAT_BC3_SRGB_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_BC3_BIT));
        vk_format_table.put(VK_FORMAT_BC4_UNORM_BLOCK, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_BC4_BIT));
        vk_format_table.put(VK_FORMAT_BC4_SNORM_BLOCK, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_BC4_BIT));
        vk_format_table.put(VK_FORMAT_BC5_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_BC5_BIT));
        vk_format_table.put(VK_FORMAT_BC5_SNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_BC5_BIT));
        vk_format_table.put(VK_FORMAT_BC6H_UFLOAT_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_BC6H_BIT));
        vk_format_table.put(VK_FORMAT_BC6H_SFLOAT_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_BC6H_BIT));
        vk_format_table.put(VK_FORMAT_BC7_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_BC7_BIT));
        vk_format_table.put(VK_FORMAT_BC7_SRGB_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_BC7_BIT));
        vk_format_table.put(VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK, new VULKAN_FORMAT_INFO(8, 3, VK_FORMAT_COMPATIBILITY_CLASS_ETC2_RGB_BIT));
        vk_format_table.put(VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK, new VULKAN_FORMAT_INFO(8, 3, VK_FORMAT_COMPATIBILITY_CLASS_ETC2_RGB_BIT));
        vk_format_table.put(VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_ETC2_RGBA_BIT));
        vk_format_table.put(VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_ETC2_RGBA_BIT));
        vk_format_table.put(VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ETC2_EAC_RGBA_BIT));
        vk_format_table.put(VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ETC2_EAC_RGBA_BIT));
        vk_format_table.put(VK_FORMAT_EAC_R11_UNORM_BLOCK, new VULKAN_FORMAT_INFO(8, 1, VK_FORMAT_COMPATIBILITY_CLASS_EAC_R_BIT));
        vk_format_table.put(VK_FORMAT_EAC_R11_SNORM_BLOCK, new VULKAN_FORMAT_INFO(8, 1, VK_FORMAT_COMPATIBILITY_CLASS_EAC_R_BIT));
        vk_format_table.put(VK_FORMAT_EAC_R11G11_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 2, VK_FORMAT_COMPATIBILITY_CLASS_EAC_RG_BIT));
        vk_format_table.put(VK_FORMAT_EAC_R11G11_SNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 2, VK_FORMAT_COMPATIBILITY_CLASS_EAC_RG_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_4x4_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_4X4_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_4x4_SRGB_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_4X4_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_5x4_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_5X4_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_5x4_SRGB_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_5X4_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_5x5_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_5X5_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_5x5_SRGB_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_5X5_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_6x5_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_6X5_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_6x5_SRGB_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_6X5_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_6x6_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_6X6_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_6x6_SRGB_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_6X6_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_8x5_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_8X5_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_8x5_SRGB_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_8X5_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_8x6_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_8X6_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_8x6_SRGB_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_8X6_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_8x8_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_8X8_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_8x8_SRGB_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_8X8_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_10x5_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_10X5_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_10x5_SRGB_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_10X5_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_10x6_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_10X6_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_10x6_SRGB_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_10X6_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_10x8_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_10X8_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_10x8_SRGB_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_10X8_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_10x10_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_10X10_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_10x10_SRGB_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_10X10_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_12x10_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_12X10_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_12x10_SRGB_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_12X10_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_12x12_UNORM_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_12X12_BIT));
        vk_format_table.put(VK_FORMAT_ASTC_12x12_SRGB_BLOCK, new VULKAN_FORMAT_INFO(16, 4, VK_FORMAT_COMPATIBILITY_CLASS_ASTC_12X12_BIT));
        vk_format_table.put(VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_PVRTC1_2BPP_BIT));
        vk_format_table.put(VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_PVRTC1_4BPP_BIT));
        vk_format_table.put(VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_PVRTC2_2BPP_BIT));
        vk_format_table.put(VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_PVRTC2_4BPP_BIT));
        vk_format_table.put(VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_PVRTC1_2BPP_BIT));
        vk_format_table.put(VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_PVRTC1_4BPP_BIT));
        vk_format_table.put(VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_PVRTC2_2BPP_BIT));
        vk_format_table.put(VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_PVRTC2_4BPP_BIT));
        // KHR_sampler_YCbCr_conversion extension - single-plane variants
        // 'PACK' formats are normal, uncompressed
        vk_format_table.put(VK_FORMAT_R10X6_UNORM_PACK16, new VULKAN_FORMAT_INFO(2, 1, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R10X6G10X6_UNORM_2PACK16, new VULKAN_FORMAT_INFO(4, 2, VK_FORMAT_COMPATIBILITY_CLASS_32_BIT));
        vk_format_table.put(VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_64BIT_R10G10B10A10));
        vk_format_table.put(VK_FORMAT_R12X4_UNORM_PACK16, new VULKAN_FORMAT_INFO(2, 1, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R12X4G12X4_UNORM_2PACK16, new VULKAN_FORMAT_INFO(4, 2, VK_FORMAT_COMPATIBILITY_CLASS_16_BIT));
        vk_format_table.put(VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_64BIT_R12G12B12A12));
        // _422 formats encode 2 texels per entry with B, R components shared - treated as compressed w/ 2x1 block size
        vk_format_table.put(VK_FORMAT_G8B8G8R8_422_UNORM, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32BIT_G8B8G8R8));
        vk_format_table.put(VK_FORMAT_B8G8R8G8_422_UNORM, new VULKAN_FORMAT_INFO(4, 4, VK_FORMAT_COMPATIBILITY_CLASS_32BIT_B8G8R8G8));
        vk_format_table.put(VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_64BIT_G10B10G10R10));
        vk_format_table.put(VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_64BIT_B10G10R10G10));
        vk_format_table.put(VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_64BIT_G12B12G12R12));
        vk_format_table.put(VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_64BIT_B12G12R12G12));
        vk_format_table.put(VK_FORMAT_G16B16G16R16_422_UNORM, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_64BIT_G16B16G16R16));
        vk_format_table.put(VK_FORMAT_B16G16R16G16_422_UNORM, new VULKAN_FORMAT_INFO(8, 4, VK_FORMAT_COMPATIBILITY_CLASS_64BIT_B16G16R16G16));
        // KHR_sampler_YCbCr_conversion extension - multi-plane variants
        // Formats that 'share' components among texels (_420 and _422), size represents total bytes for the smallest possible texel block
        // _420 share B, R components within a 2x2 texel block
        vk_format_table.put(VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM, new VULKAN_FORMAT_INFO(6, 3, VK_FORMAT_COMPATIBILITY_CLASS_8BIT_3PLANE_420));
        vk_format_table.put(VK_FORMAT_G8_B8R8_2PLANE_420_UNORM, new VULKAN_FORMAT_INFO(6, 3, VK_FORMAT_COMPATIBILITY_CLASS_8BIT_2PLANE_420));
        vk_format_table.put(VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16, new VULKAN_FORMAT_INFO(12, 3, VK_FORMAT_COMPATIBILITY_CLASS_10BIT_3PLANE_420));
        vk_format_table.put(VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16, new VULKAN_FORMAT_INFO(12, 3, VK_FORMAT_COMPATIBILITY_CLASS_10BIT_2PLANE_420));
        vk_format_table.put(VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16, new VULKAN_FORMAT_INFO(12, 3, VK_FORMAT_COMPATIBILITY_CLASS_12BIT_3PLANE_420));
        vk_format_table.put(VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16, new VULKAN_FORMAT_INFO(12, 3, VK_FORMAT_COMPATIBILITY_CLASS_12BIT_2PLANE_420));
        vk_format_table.put(VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM, new VULKAN_FORMAT_INFO(12, 3, VK_FORMAT_COMPATIBILITY_CLASS_16BIT_3PLANE_420));
        vk_format_table.put(VK_FORMAT_G16_B16R16_2PLANE_420_UNORM, new VULKAN_FORMAT_INFO(12, 3, VK_FORMAT_COMPATIBILITY_CLASS_16BIT_2PLANE_420));
        // _422 share B, R components within a 2x1 texel block
        vk_format_table.put(VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM, new VULKAN_FORMAT_INFO(4, 3, VK_FORMAT_COMPATIBILITY_CLASS_8BIT_3PLANE_422));
        vk_format_table.put(VK_FORMAT_G8_B8R8_2PLANE_422_UNORM, new VULKAN_FORMAT_INFO(4, 3, VK_FORMAT_COMPATIBILITY_CLASS_8BIT_2PLANE_422));
        vk_format_table.put(VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16, new VULKAN_FORMAT_INFO(8, 3, VK_FORMAT_COMPATIBILITY_CLASS_10BIT_3PLANE_422));
        vk_format_table.put(VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16, new VULKAN_FORMAT_INFO(8, 3, VK_FORMAT_COMPATIBILITY_CLASS_10BIT_2PLANE_422));
        vk_format_table.put(VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16, new VULKAN_FORMAT_INFO(8, 3, VK_FORMAT_COMPATIBILITY_CLASS_12BIT_3PLANE_422));
        vk_format_table.put(VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16, new VULKAN_FORMAT_INFO(8, 3, VK_FORMAT_COMPATIBILITY_CLASS_12BIT_2PLANE_422));
        vk_format_table.put(VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM, new VULKAN_FORMAT_INFO(8, 3, VK_FORMAT_COMPATIBILITY_CLASS_16BIT_3PLANE_422));
        vk_format_table.put(VK_FORMAT_G16_B16R16_2PLANE_422_UNORM, new VULKAN_FORMAT_INFO(8, 3, VK_FORMAT_COMPATIBILITY_CLASS_16BIT_2PLANE_422));
        // _444 do not share
        vk_format_table.put(VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM, new VULKAN_FORMAT_INFO(3, 3, VK_FORMAT_COMPATIBILITY_CLASS_8BIT_3PLANE_444));
        vk_format_table.put(VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16, new VULKAN_FORMAT_INFO(6, 3, VK_FORMAT_COMPATIBILITY_CLASS_10BIT_3PLANE_444));
        vk_format_table.put(VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16, new VULKAN_FORMAT_INFO(6, 3, VK_FORMAT_COMPATIBILITY_CLASS_12BIT_3PLANE_444));
        vk_format_table.put(VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM, new VULKAN_FORMAT_INFO(6, 3, VK_FORMAT_COMPATIBILITY_CLASS_16BIT_3PLANE_444));
    };
    
    //
    public long getCorrectAccessMaskByImageLayout(int imageLayout_) {
        int imageLayout = imageLayout_;
        long accessMask = 0L;

        //
        switch (imageLayout) {
            case VK_IMAGE_LAYOUT_GENERAL:
                accessMask |= VK_ACCESS_2_MEMORY_READ_BIT | VK_ACCESS_2_MEMORY_WRITE_BIT;
                break;

            case VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL:
                accessMask |= VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT;
                break;

            case VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL:
                accessMask |= VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT | VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;
                break;

            case VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL:
                accessMask |= VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT;
                break;

            case VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL:
                accessMask |= VK_ACCESS_2_SHADER_READ_BIT;
                break;

            case VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL:
                accessMask |= VK_ACCESS_2_TRANSFER_READ_BIT;
                break;

            case VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL:
                accessMask |= VK_ACCESS_2_TRANSFER_WRITE_BIT;
                break;

            // there is no correct conversion
            case VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL:
                accessMask |= VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT | VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;
                break;

            // there is no correct conversion
            case VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL:
                accessMask |= VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT | VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;
                break;

            // there is no correct conversion
            case VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL:
                accessMask |= VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT | VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;
                break;

            // there is no correct conversion
            case VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL:
                accessMask |= VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT;
                break;

            // there is no correct conversion
            case VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL:
                accessMask |= VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT | VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;
                break;

            // there is no correct conversion
            case VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL:
                accessMask |= VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT;
                break;

            //
            case VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL:
                accessMask |= VK_ACCESS_2_MEMORY_READ_BIT;
                break;

            //
            case VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL:
                accessMask |= VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT | VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT | VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT;
                break;

            //
            case VK_IMAGE_LAYOUT_PRESENT_SRC_KHR:
                accessMask |= VK_ACCESS_2_MEMORY_READ_BIT;
                break;

            default:;

                // TODO: video decoding and encoding API
        };

        return accessMask;
    };

    static public long getAccessMaskByBufferUsage(int usage_) {
        int usage = usage_;
        long accessMask = 0L;
        for (var i = 0; i < 32; i++) {
        var masked = usage & (1 << i);
            switch (masked) {
                case VK_BUFFER_USAGE_TRANSFER_SRC_BIT:
                    accessMask |= VK_ACCESS_2_TRANSFER_READ_BIT;
                    break;

                case VK_BUFFER_USAGE_TRANSFER_DST_BIT:
                    accessMask |= VK_ACCESS_2_TRANSFER_WRITE_BIT;
                    break;

                case VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT:
                    accessMask |= VK_ACCESS_2_UNIFORM_READ_BIT;
                    break;

                case VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT:
                    accessMask |= VK_ACCESS_2_SHADER_STORAGE_READ_BIT | VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT;
                    break;

                case VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT:
                    accessMask |= VK_ACCESS_2_UNIFORM_READ_BIT;
                    break;

                case VK_BUFFER_USAGE_STORAGE_BUFFER_BIT:
                    accessMask |= VK_ACCESS_2_SHADER_STORAGE_READ_BIT | VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT;
                    break;

                case VK_BUFFER_USAGE_INDEX_BUFFER_BIT:
                    accessMask |= VK_ACCESS_2_INDEX_READ_BIT;
                    break;

                case VK_BUFFER_USAGE_VERTEX_BUFFER_BIT:
                    accessMask |= VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT;
                    break;

                case VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT:
                    accessMask |= VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT;
                    break;

                case VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT:
                    // non-trivial...
                    //accessMask |= VK_ACCESS_2_SHADER_STORAGE_READ_BIT | VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT;
                    break;

                case VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT:
                    accessMask |= VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT;
                    break;

                case VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT:
                    accessMask |= VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT | VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT;
                    break;

                case VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT:
                    accessMask |= VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT;
                    break;

                case VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR:
                    accessMask |= VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR;
                    break;

                case VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR:
                    accessMask |= VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR;
                    break;

                case VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR:
                    accessMask |= VK_ACCESS_2_SHADER_READ_BIT;
                    break;

                default:;
                    // TODO: video decoding and encoding API
            };
        };
        return accessMask;
    };

    //
    static public long getAccessMaskByImageUsage(int usage_) {
        int usage = usage_;
        long accessMask = 0L;
        for (var i = 0; i < 32; i++) {
          var masked = usage & (1 << i);
            switch (masked) {
                case VK_IMAGE_USAGE_TRANSFER_SRC_BIT:
                    accessMask |= VK_ACCESS_2_TRANSFER_READ_BIT;
                    break;

                case VK_IMAGE_USAGE_TRANSFER_DST_BIT:
                    accessMask |= VK_ACCESS_2_TRANSFER_WRITE_BIT;
                    break;

                case VK_IMAGE_USAGE_SAMPLED_BIT:
                    accessMask |= VK_ACCESS_2_SHADER_SAMPLED_READ_BIT;
                    break;

                case VK_IMAGE_USAGE_STORAGE_BIT:
                    accessMask |= VK_ACCESS_2_SHADER_STORAGE_READ_BIT | VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT;
                    break;

                case VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT:
                    accessMask |= VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT;
                    break;

                case VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT:
                    accessMask |= VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT | VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;
                    break;

                case VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT:
                    // non-trivial...
                    break;

                case VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT:
                    accessMask |= VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT;
                    break;

                default:;
                    // TODO: video decoding and encoding API
            };
        };
        return accessMask;
    };

    //
    public static HashMap<Long, Long> pipelineStagesByAccessMask = new HashMap<Long, Long>();
    {
        pipelineStagesByAccessMask.put(VK_ACCESS_2_MEMORY_READ_BIT, VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_MEMORY_WRITE_BIT, VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT, VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_INDEX_READ_BIT, VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT, VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT, VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT, VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT, VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_TRANSFER_READ_BIT, VK_PIPELINE_STAGE_2_COPY_BIT | VK_PIPELINE_STAGE_2_BLIT_BIT | VK_PIPELINE_STAGE_2_RESOLVE_BIT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_TRANSFER_WRITE_BIT, VK_PIPELINE_STAGE_2_COPY_BIT | VK_PIPELINE_STAGE_2_BLIT_BIT | VK_PIPELINE_STAGE_2_CLEAR_BIT | VK_PIPELINE_STAGE_2_RESOLVE_BIT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_HOST_READ_BIT, VK_PIPELINE_STAGE_2_HOST_BIT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_HOST_WRITE_BIT, VK_PIPELINE_STAGE_2_HOST_BIT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT, VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT, VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT, VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT, VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV, VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV, VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT, VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI, VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR, VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR | VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR | VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR, VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT, VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR, VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT, VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT);
        pipelineStagesByAccessMask.put(VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT, VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT);
    };

    //
    static public int getCorrectPipelineStagesByAccessMask(long accessMask_) {
        long accessMask = accessMask_;
        int pipelineStageMask = 0;

        //
        for (var i = 0; i < 32; i++) {
            long masked = accessMask & (1 << i);
            pipelineStageMask |= pipelineStagesByAccessMask.get(masked);
            // TODO: video decoding and encoding API
        };

        return pipelineStageMask;
    };

    //
    public static class SubmitCmd extends BasicCInfo {
        public VkQueue queue = null;
        public VkCommandBuffer cmdBuf = null;
        public IntBuffer dstStageMask = null;
        public LongBuffer waitSemaphores = null;
        public LongBuffer signalSemaphores = null;
        public Promise<Integer> onDone = null;
    };

    //
    public static class SurfaceCapability extends BasicCInfo  {
        public IntBuffer surfaceSupport = memAllocInt(1);
        public IntBuffer presentModeCount = memAllocInt(1);
        public IntBuffer formatCount = memAllocInt(1);
        public IntBuffer presentModes = null;
        public VkSurfaceCapabilities2KHR capabilities2 = null;
        public org.lwjgl.vulkan.VkSurfaceFormat2KHR.Buffer formats2 = null;

        public SurfaceCapability() {}
    }

    //
    static public class FormatProperties extends BasicCInfo {
        public VkFormatProperties3 properties3 = null;
        public VkFormatProperties2 properties2 = null;
        public VkFormatProperties properties = null;
        public BasicCInfo.VULKAN_FORMAT_INFO info = null;

        public FormatProperties() {};
    };




}
